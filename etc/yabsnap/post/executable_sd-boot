#!/usr/bin/env nu

def read_cmdline []: nothing -> list<string> {
	[/etc/kernel/cmdline, ...(glob /etc/cmdline.d/*.conf)]
	| where { path exists }
	| each { open | str trim | split row (char space) }
	| flatten
}

def main [config_file: path]: nothing -> nothing {
	let config = open --raw $config_file | ^jc --ini | from json | get DEFAULT

	if $config.snap_type != 'BTRFS' {
		return
	}

	let ESP = ^bootctl --print-esp-path
	let ENTRIES_DIR = $ESP | path join 'loader' 'entries'

	mkdir $ENTRIES_DIR

	let previous_entries = glob $'($ENTRIES_DIR)/*.yabsnap-<[0-9]:14>.conf'
	if ($previous_entries | is-not-empty) {
		rm --force --permanent ...$previous_entries

		$previous_entries
		| path basename
		| parse '{name}.conf'
		| get name
		| each { print $"Removed previous yabsnap systemd-boot entry '($in)'" }
	}

	let ARCHITECTURE = uname | get machine | match $in {
		'x86_64' => 'x64',
	}
	let MACHINE_ID = open --raw /etc/machine-id | str trim
	let OS_RELEASE = open --raw /etc/os-release | ^jc --os-release | from json
	let cmdline = read_cmdline | where {|it| $it != 'rw'}
	let snaps = ^yabsnap --config-file $config_file list-json | lines | each { from json }

	for preset_file in (glob /etc/mkinitcpio.d/*.preset) {
		let preset = open --raw $preset_file | ^jc --kv | from json

		let preset_name = $preset_file | path basename | parse '{name}.preset' | get 0.name
		let linux = (
			$preset.fallback_kver?
			| default ($preset.default_kver? | default $preset.ALL_kver?)
		)
		let initrd = (
			$preset.fallback_image?
			| default ($preset.default_image? | default $preset.ALL_image?)
		)
		let version = (
			^file --brief --dereference $linux
			| ^sed --quiet '/version /!q1;s/.*version //;s/ .*//p'
		)

		for snap in $snaps {
			let key = $'($OS_RELEASE.ID)-($preset_name).yabsnap-($snap.file.timestamp)'
			let comment = match $snap.trigger {
				'S' => 'scheduled',
				'I' => 'installation',
				'U' => $'"($snap.comment)" user',
			}
			let subvol = ^btrfs subvolume show ($snap.file.prefix + $snap.file.timestamp) | lines | first
			$'
				sort-key ($key | split row '.' | reverse | str join '.')
				title ($OS_RELEASE.PRETTY_NAME), ($comment) snapshot on ($snap.file.timestamp | into datetime --format '%Y%m%d%H%M%S' | format date '%c')
				machine-id ($MACHINE_ID)

				architecture ($ARCHITECTURE)
				version ($version)
				linux /($linux | path relative-to $ESP)
				initrd /($initrd | path relative-to $ESP)
				options ($cmdline | str join (char space)) rootflags=subvol=/($subvol) ro
			'
			| str trim
			| lines
			| str trim
			| str join (char newline)
			| save ($ENTRIES_DIR | path join $'($key).conf')

			print $"Generated yabsnap systemd-boot entry '($key)'"
		}
	}
}
