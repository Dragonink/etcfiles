#!/usr/bin/env nu

def main [
	command: string
	kernel_version: string
	entry_dir_abs: path
	kernel_image?: path
	...initrd: path
]: nothing -> nothing {
	let verbose = ($env.KERNEL_INSTALL_VERBOSE? | default 0 | into int) > 0
	let entry_token = $env.KERNEL_INSTALL_ENTRY_TOKEN
	let boot_root = $env.KERNEL_INSTALL_BOOT_ROOT

	let loader_entry = $boot_root | path join 'loader' 'entries' $"($entry_token)-($kernel_version).conf"

	let previous_entries_glob = $boot_root | path join 'loader' 'entries' $"($entry_token)-($kernel_version)-yabsnap_*.conf"
	if $verbose {
		print $"Removing ($previous_entries_glob)"
	}
	let previous_entries = glob $previous_entries_glob
	if ($previous_entries | is-not-empty) {
		rm --force --permanent ...$previous_entries
	}

	if $command != 'add' {
		return
	}

	ls /etc/yabsnap/configs/
	| select name
	| insert config {
		open --raw $in.name
		| ^jc --ini
		| from json
		| get DEFAULT
	}
	| where config.snap_type == 'BTRFS' and config.source == '/'
	| get name
	| each {|config|
		^yabsnap --config-file $config list-json
		| lines
		| each { from json }
	}
	| flatten
	| each {|snapshot|
		let new_loader_entry = $boot_root | path join 'loader' 'entries' $"($entry_token)-($kernel_version)-yabsnap_($snapshot.file.timestamp).conf"
		if $verbose {
			print $"Creating ($new_loader_entry)"
		}

		const SELF = path self
		let datetime = (
			$snapshot.file.timestamp
			| into datetime --format '%Y%m%d%H%M%S'
			| format date
		)
		let subvol = '/' + (
			^btrfs subvolume show ($snapshot.file.prefix + $snapshot.file.timestamp)
			| lines
			| first
			| str trim
		)

		const AWK_PROGRAM = '
			/^# File created by\W/{printf "# File created by %s\n", script; next}
			/^title\W/{printf "%s (yabsnap %s)\n", $0, datetime; next}
			/^sort-key\W/{printf "%s-yabsnap_%s\n", $0, timestamp; next}
			/^options\W/{printf "%s rootflags=subvol=%s\n", $0, subvol; next}
			{print}
		'
		^awk -v script=($SELF) -v datetime=($datetime) -v timestamp=($snapshot.file.timestamp) -v subvol=($subvol) $AWK_PROGRAM $loader_entry
		| save --force $new_loader_entry
	}
	| ignore
}
